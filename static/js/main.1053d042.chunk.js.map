{"version":3,"sources":["components/Panel.js","components/TileLeft.js","components/TileRightUtil.js","components/TileRight.js","components/ResumeTile.js","components/Resume.js","App.js","serviceWorker.js","index.js"],"names":["Panel","props","className","name","subtext","jobStatus","href","twitterURL","target","instaURL","githubURL","linkedinURL","TileLeft","obj","TileRightUtil","Object","keys","data","map","key","i","TileRight","tile_data","length","ResumeTile","Resume","download","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"00EAwBeA,MAtBf,SAAeC,GACX,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,QAASD,EAAME,MAC7B,yBAAKD,UAAU,WAAYD,EAAMG,SACjC,yBAAKF,UAAU,aAAcD,EAAMI,WACnC,yBAAKH,UAAU,gBACX,uBAAGI,KAAOL,EAAMM,WAAYC,OAAO,UAAS,uBAAGN,UAAU,mBACzD,uBAAGI,KAAOL,EAAMQ,SAAUD,OAAO,UAAS,uBAAGN,UAAU,qBACvD,uBAAGI,KAAOL,EAAMS,UAAWF,OAAO,UAAS,uBAAGN,UAAU,kBACxD,uBAAGI,KAAOL,EAAMU,YAAcH,OAAO,UAAS,uBAAGN,UAAU,0B,eCJxEU,MATf,SAAkBX,GACd,OACI,yBAAKC,UAAU,sBACX,4BAAKD,EAAMY,OCKRC,MARf,SAAuBb,GACnB,OACI,6BACKc,OAAOC,KAAKf,EAAMgB,MAAMC,KAAI,SAACC,EAAKC,GAAN,OAAa,2BAAInB,EAAMgB,KAAKE,SCsBtDE,MAxBf,SAAmBpB,GACf,OAAGA,EAAMqB,UAAUC,QAAQ,EAEnB,yBAAKrB,UAAU,wBACVa,OAAOC,KAAKf,EAAMqB,WAAWJ,KAAI,SAACC,EAAIC,GAAL,OAAW,kBAAC,EAAD,CAAeH,KAAQhB,EAAMqB,UAAUH,GAAMN,IAAOM,QAOrG,yBAAKjB,UAAU,wBACX,4BACCa,OAAOC,KAAKf,EAAMqB,WAAWJ,KAAI,SAACC,EAAIC,GAAL,OAAW,4BAAI,kBAAC,EAAD,CAAeH,KAAQhB,EAAMqB,UAAUH,GAAMN,IAAOM,WCDtGK,MAZf,SAAoBvB,GAChB,OACI,6BACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,CAAUW,IAAOZ,EAAMY,MACvB,kBAAC,EAAD,CAAWS,UAAarB,EAAMqB,eCQ/BG,MAXf,WACI,OACI,yBAAKvB,UAAU,SACVa,OAAOC,KAAKC,GAAMC,KAAI,SAACL,EAAKO,GAAN,OAAY,6BAAK,kBAAC,EAAD,CAAYD,IAAOC,EAAGP,IAAOA,EAAKS,UAAaL,EAAKJ,SAC5F,6BACA,6BACA,uBAAGX,UAAU,SAASI,KAAO,qEAAqEE,OAAO,SAASkB,UAAQ,GAAC,yBAAKxB,UAAU,eAAf,mCCoBxHyB,MA3Bf,WAQE,OACI,yBAAKzB,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAW,kBAAC,EAAD,CACxBC,KAXC,yBAYDC,QAXI,qCAYJC,UAXM,GAYNE,WAXO,GAYPE,SAXK,GAYLC,UAXM,GAYNC,YAXQ,MAaV,yBAAKT,UAAU,YAAW,kBAAC,EAAD,UCZhB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1053d042.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/panel.css';\r\nfunction Panel(props){\r\n    return(\r\n        <div className=\"left\">\r\n            <div className=\"bg-img\">\r\n                <div className=\"left-inner\">\r\n                    <div className=\"info\">\r\n                        <h2 className=\"name\">{ props.name}</h2>\r\n                        <div className=\"subtext\">{ props.subtext}</div>\r\n                        <div className=\"jobStatus\">{ props.jobStatus}</div>\r\n                        <div className=\"social-links\">\r\n                            <a href={ props.twitterURL} target=\"_blank\"><i className=\"fa fa-twitter\"></i></a>\r\n                            <a href={ props.instaURL} target=\"_blank\"><i className=\"fa fa-instagram\"></i></a>\r\n                            <a href={ props.githubURL} target=\"_blank\"><i className=\"fa fa-github\"></i></a>\r\n                            <a href={ props.linkedinURL}  target=\"_blank\"><i className=\"fa fa-linkedin\"></i></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Panel;","import React from 'react';\r\n\r\nfunction TileLeft(props) {\r\n    return(\r\n        <div className=\"col-sm-2 tile-left\">\r\n            <h5>{props.obj}</h5>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TileLeft;","import React from 'react';\r\n\r\nfunction TileRightUtil(props) {\r\n    return(\r\n        <div>\r\n            {Object.keys(props.data).map((key, i) =>  <p>{props.data[key]}</p>)}\r\n        </div>\r\n    );\r\n    \r\n}\r\nexport default TileRightUtil;","import React from 'react';\r\nimport TileRightUtil from './TileRightUtil';\r\n\r\nfunction TileRight(props) {\r\n    if(props.tile_data.length<=1){\r\n        return(\r\n            <div className=\"col-sm-10 tile-right\">\r\n                {Object.keys(props.tile_data).map((key,i) => <TileRightUtil data = {props.tile_data[key]} obj = {key} />)}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        return(\r\n            <div className=\"col-sm-10 tile-right\">\r\n                <ul>\r\n                {Object.keys(props.tile_data).map((key,i) => <li><TileRightUtil data = {props.tile_data[key]} obj = {key} /></li>)}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    \r\n\r\n}\r\n\r\nexport default TileRight;","import React from 'react';\r\nimport TileLeft from './TileLeft';\r\nimport TileRight from './TileRight';\r\nfunction ResumeTile(props) {\r\n    return(\r\n        <div>\r\n            <div className=\"row\">\r\n                <TileLeft obj = {props.obj} />\r\n                <TileRight tile_data = {props.tile_data} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ResumeTile;","import React from 'react';\r\nimport '../css/resume.css';\r\nimport data from \"../data/resume.json\";\r\nimport ResumeTile from \"./ResumeTile\";\r\n\r\nfunction Resume(){\r\n    return(\r\n        <div className=\"right\">\r\n            {Object.keys(data).map((obj, i) => <div><ResumeTile key = {i} obj = {obj} tile_data = {data[obj]}/></div>)}\r\n            <br />\r\n            <br />\r\n            <a className=\"resume\" href = \"https://drive.google.com/open?id=1srvf3R2JIBtxNJGbc5lWPZ7mQPkrGKgL\" target=\"_blank\" download><div className=\"resume-link\">Grab a PDF of my full resume</div></a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Resume;","import React from 'react';\nimport './App.css';\nimport Panel from './components/Panel';\nimport Resume from './components/Resume';\nfunction App() {\n  const name=\"Hey, I am Uditi Arora.\";\n  const subtext=\"I am a UG student at MNIT, Jaipur.\";\n  const jobStatus=\"\";\n  const twitterURL=\"\";\n  const instaURL=\"\";\n  const githubURL=\"\";\n  const linkedinURL=\"\";\n  return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-4\"><Panel \n            name = {name}\n            subtext = {subtext}\n            jobStatus = {jobStatus}\n            twitterURL = {twitterURL}\n            instaURL = {instaURL}\n            githubURL = {githubURL}\n            linkedinURL = {linkedinURL}\n          /></div>\n          <div className=\"col-md-8\"><Resume /></div>\n        </div>\n      </div>\n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}